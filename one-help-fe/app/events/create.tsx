import React, { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Platform,
  KeyboardAvoidingView,
  Keyboard,
  TouchableWithoutFeedback,
} from "react-native";
import { useRouter } from "expo-router";
import { useForm, Controller } from "react-hook-form";
import DateTimePicker from "@react-native-community/datetimepicker";
import { TextInput } from "@/components/controls";

export default function CreateEvent() {
  const router = useRouter();
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const [showStartDatePicker, setShowStartDatePicker] = useState(false);
  const [showEndDatePicker, setShowEndDatePicker] = useState(false);

  const onSubmit = (data: any) => {
    console.log("–ù–æ–≤–∞ –ø–æ–¥—ñ—è:", data);
    router.back();
  };

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === "ios" ? "padding" : "height"}
      className="flex-1 bg-white"
    >
      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
        <ScrollView className="flex-1 p-6">
          <Text className="text-2xl font-bold text-gray-msg mb-4">
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é
          </Text>
          <View className="flex flex-col gap-4">
            <Controller
              control={control}
              name="title"
              rules={{ required: "–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó"
                  required="*"
                  placeholder="–ë–ª–∞–≥–æ–¥—ñ–π–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω"
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.title}
                  errorMessage={errors.title?.message?.toString()}
                />
              )}
            />

            <Controller
              control={control}
              name="description"
              rules={{ required: "–û–ø–∏—Å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–û–ø–∏—Å"
                  required="*"
                  placeholder="–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –±—É–¥–µ –Ω–∞ –∑–∞—Ö–æ–¥—ñ"
                  multiline
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.description}
                  errorMessage={errors.description?.message?.toString()}
                />
              )}
            />

            <Text className="text-gray-msg font-medium">
              –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É{" "}
              <Text className="text-primary font-medium items-right">* </Text>{" "}
            </Text>
            <Controller
              control={control}
              name="start_date"
              rules={{ required: "–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é" }}
              render={({ field: { onChange, value } }) => (
                <>
                  <TouchableOpacity
                    onPress={() => setShowStartDatePicker(true)}
                    className="border border-gray-300 rounded-lg p-3"
                  >
                    <Text className="text-grey-msg">
                      {value
                        ? value.toLocaleDateString()
                        : "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É"}
                    </Text>
                  </TouchableOpacity>
                  {showStartDatePicker && (
                    <DateTimePicker
                      value={value || new Date()}
                      mode="date"
                      display="default"
                      onChange={(_, selectedDate) => {
                        setShowStartDatePicker(false);
                        if (selectedDate) onChange(selectedDate);
                      }}
                    />
                  )}
                  {errors.start_date && (
                    <Text className="text-red-500 text-sm">
                      {errors.start_date?.message?.toString()}
                    </Text>
                  )}
                </>
              )}
            />

            <Text className="text-gray-msg font-medium"> –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è </Text>
            <Controller
              control={control}
              name="end_date"
              render={({ field: { onChange, value } }) => (
                <>
                  <TouchableOpacity
                    onPress={() => setShowEndDatePicker(true)}
                    className="border border-gray-300 rounded-lg p-3"
                  >
                    <Text className="text-grey-msg">
                      {value
                        ? value.toLocaleDateString()
                        : "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"}
                    </Text>
                  </TouchableOpacity>
                  {showEndDatePicker && (
                    <DateTimePicker
                      value={value || new Date()}
                      mode="date"
                      display="default"
                      onChange={(_, selectedDate) => {
                        setShowEndDatePicker(false);
                        if (selectedDate) onChange(selectedDate);
                      }}
                    />
                  )}
                </>
              )}
            />

            <Controller
              control={control}
              name="format"
              rules={{ required: "–§–æ—Ä–º–∞—Ç —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–§–æ—Ä–º–∞—Ç –ø–æ–¥—ñ—ó (online/offline)"
                  required="*"
                  placeholder="offline"
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.format}
                  errorMessage={errors.format?.message?.toString()}
                />
              )}
            />

            <Controller
              control={control}
              name="max_participants"
              rules={{ required: "–í–∫–∞–∂—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤"
                  required="*"
                  placeholder="100"
                  keyboardType="numeric"
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.max_participants}
                  errorMessage={errors.max_participants?.message?.toString()}
                />
              )}
            />

            <Controller
              control={control}
              name="minimum_donation"
              rules={{ required: "–í–∫–∞–∂—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫ (–≥—Ä–Ω)"
                  required="*"
                  placeholder="50"
                  keyboardType="numeric"
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.minimum_donation}
                  errorMessage={errors.minimum_donation?.message?.toString()}
                />
              )}
            />

            <Controller
              control={control}
              name="address"
              rules={{ required: "–ê–¥—Ä–µ—Å–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é –¥–ª—è offline –ø–æ–¥—ñ–π" }}
              render={({ field: { onChange, value } }) => (
                <TextInput
                  label="–ê–¥—Ä–µ—Å–∞ (–¥–ª—è offline –∑–∞—Ö–æ–¥—ñ–≤)"
                  required="*"
                  placeholder="–ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1"
                  onChangeText={onChange}
                  value={value}
                  error={!!errors.address}
                  errorMessage={errors.address?.message?.toString()}
                />
              )}
            />
          </View>

          <TouchableOpacity
            onPress={handleSubmit(onSubmit)}
            className="bg-primary rounded-lg p-4 mt-6 items-center"
          >
            <Text className="text-white text-lg font-semibold">
              –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é üéâ
            </Text>
          </TouchableOpacity>
        </ScrollView>
      </TouchableWithoutFeedback>
    </KeyboardAvoidingView>
  );
}
